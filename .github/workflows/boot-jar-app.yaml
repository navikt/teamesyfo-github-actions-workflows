on:
  workflow_call:
    inputs:
      app:
        required: true
        type: string
      java-version:
        required: false
        type: string
        default: "19"
jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["kotlin"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: "temurin"
          java-version: ${{inputs.java-version}}
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Build bootJar artifacts
        run: |
          ./gradlew bootJar -x test
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: navikt/teamesyfo-github-actions-workflows/actions/gradle-cached@main
        with:
          java-version: ${{inputs.java-version}}
      - run: ./gradlew test
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
    outputs:
      image: ${{ steps.build-and-publish.outputs.image }}
    steps:
      - uses: navikt/teamesyfo-github-actions-workflows/actions/boot-jar-to-docker@main
        id: build-and-publish
        with:
          app: ${{ inputs.app }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          java-version: ${{inputs.java-version}}

  deploy-dev:
    if: ${{ github.actor != 'dependabot[bot]' && github.event.pull_request.draft == false }}
    name: Deploy to dev
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          RESOURCE: nais/nais-dev.yaml
          VAR: image=${{ needs.build.outputs.image }}

  deploy-prod:
    if: github.ref_name == 'main'
    name: Deploy to prod
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: prod-gcp
          RESOURCE: nais/nais-prod.yaml
          VAR: image=${{ needs.build.outputs.image }}
