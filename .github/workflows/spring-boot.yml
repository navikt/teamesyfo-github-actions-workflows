name: Spring boot
on:
  workflow_call:
    inputs:
      app:
        required: false
        default: ${{ github.event.repository.name }}
        type: string
      dev-cluster:
        required: false
        default: dev-gcp
        type: string
      prod-cluster:
        required: false
        default: prod-gcp
        type: string

jobs:
  build-and-publish:
    permissions:
        contents: "read"
        id-token: "write"
    name: Bygg, test og publiser docker image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}
    env:
      ORG_GRADLE_PROJECT_githubUser: x-access-token
      ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v1
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-
      - name: Lint koden
        run:  ./gradlew ktlintCheck

      - name: Run tests
        run:  ./gradlew test

      - name: Build jar
        run: ./gradlew bootJar -x test

      - name: docker-build-push
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: team-esyfo
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}

#      - name: Slack Notification
#        uses: rtCamp/action-slack-notify@b24d75fe0e728a4bf9fc42ee217caa686d141ee8
#        if: failure() && github.ref_name == 'master'
#        env:
#            SLACK_COLOR: '#ff0000'
#            SLACK_MESSAGE: ${{ inputs.app }} bygget feiler p√• master
#            SLACK_TITLE: ':broken_heart:'
#            SLACK_WEBHOOK: ${{ secrets.SPOKELSER_WEBHOOK }}

#  trivy-docker:
#    permissions:
#      id-token: 'write'
#      security-events: 'write'
#    needs: build-and-publish
#    uses: navikt/flex-github-actions-workflows/.github/workflows/trivy-docker.yml@master
#    with:
#      image: ${{ needs.build-and-publish.outputs.image }}
#    secrets: inherit

  codeql-analyse:
    name: CodeQL-analyse
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      security-events: write
    steps:
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          queries: security-and-quality
          languages: 'java'
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:java"

  deploy-dev:
    name: Deploy to dev
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais/nais-dev.yaml
          VAR: image=${{ needs.build.outputs.image }}

  deploy-prod:
    if: github.ref_name == 'main'
    name: Deploy to prod
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: nais/nais-prod.yaml
          VAR: image=${{ needs.build.outputs.image }}